#!/usr/bin/env node

'use strict';

const argv = require('minimist')(process.argv.slice(2));
const colors = require('colors/safe');
const path = require('path');
const fs = require('fs');
const {utils} = require('./utils.js');

process.title = 'doc-server';

const print = createPrint();

if (argv.h || argv.help) return printHelpInfo();
if (argv.v || argv.version) return printVersion();
if (argv.c || argv.config) return useConfig();
print.info("It is not a command provided by dynamic-pack, you can execute dp -h to view the currently supported commands!");
process.exit();

function printHelpInfo() {
    print.info(getHelpInfo());
    process.exit();

    function getHelpInfo() {
        return [
            'usage: doc-server [path] [options]',
            '',
            'options',
            '-h --help              Print this list and exit',
            '-v --version           Print the current version and exit',
            '-c --config            Configuration file path'
        ].join('\n');
    }
}

function printVersion() {
    exit('v' + require('../package.json').version);
}

function useConfig(){
    const configPath = getAbsPath(getRootPath(),getConfigPath());
    if(!utils.isString(configPath)) return exit('ds.config.json没有设置路径！');
    runConfig(readJson(configPath));

    function getConfigPath(){
        const config = argv.c || argv.config;
        if(utils.isTrue(config)) return getDefaultPath();
        if(utils.isString(config)) return config;
        return null;

        function getDefaultPath(){
            return './ds.config.json';
        }
    }

    function runConfig(config) {
        if(!utils.isObject(config)) return exit('ds.config.json信息异常！')
        const fileList = [];
        eachFolder(getRootPath(), curryUseFile(config,fileList));
        console.log('fileList',fileList)

        function curryUseFile(config,fileList){
            const excludeKeywords = config.exclude.keyword;
            const extension = getExtension(config.extension)

            function getExtension(extension){
                if(utils.isUndefined(extension)) return ['.md'];
                if(Array.isArray(extension)) return extension;
                if(utils.isString(extension)) return [extension];
                throw new Error("extension参数异常！")
            }

            return function useFile(fullPath,foldedPath,fileName){
                if(excludeKeywords.some(word => fullPath.includes(word))) return null;
                if(extension.some(x=>fileName.endsWith(x))) fileList.push(fullPath)
            }
        }
    }
}


//基础方法
function createPrint() {
    return {
        info(...text) {
            console.log(...text)
        },
        primary(coreInfo) {
            console.log(colors.blue(coreInfo));
        },
        error(coreInfo) {
            console.log(colors.red(coreInfo))
        },
        success(coreInfo) {
            console.log(colors.green(coreInfo))
        }
    }
}

function exit(info){
    print.error(info);
    process.exit();
}

function readJson(path){
    return require(path);
}

function readFile(path) {
    return fs.readFileSync(path, 'utf-8');
}

function getAbsPath(currentPath,relativePath) {
    return getWinPath(path.join(currentPath, relativePath));
}

function getRootPath(){
    return getWinPath(process.cwd())
}

function getWinPath(result) {
    return result.replace(/\\/g, '/');
}

function eachFolder(dirName,callback){
    const dir = fs.readdirSync(dirName);
    dir.forEach(name => {
        const currentPath = getAbsPath(dirName,name);
        if(isDirectory(currentPath)) return eachFolder(currentPath,callback);
        if(utils.isFunction(callback)) return callback(currentPath,dirName,name);
    })
}

function isDirectory(dirPath){
    return fs.statSync(dirPath).isDirectory();
}
