#!/usr/bin/env node

'use strict';

const argv = require('minimist')(process.argv.slice(2));
const colors = require('colors/safe');
const path = require('path');
const fs = require('fs');
const {utils} = require('./utils.js');

process.title = 'doc-server';

const print = createPrint();

if (argv.h || argv.help) return printHelpInfo();
if (argv.v || argv.version) return printVersion();
if (argv.c || argv.config) return useConfig();
print.info("It is not a command provided by doc-server, you can execute ds -h to view the currently supported commands!");
process.exit();

function printHelpInfo() {
    print.info(getHelpInfo());
    process.exit();

    function getHelpInfo() {
        return [
            'usage: doc-server [path] [options]',
            '',
            'options',
            '-h --help              Print this list and exit',
            '-v --version           Print the current version and exit',
            '-c --config            Configuration file path'
        ].join('\n');
    }
}

function printVersion() {
    exit('v' + require('../package.json').version);
}

function useConfig() {
    const configPath = getAbsPath(getRootPath(), getConfigPath());
    if (!utils.isString(configPath)) return exit('ds.config.json没有设置路径！');
    runConfig(readJson(configPath));

    function getConfigPath() {
        const config = argv.c || argv.config;
        if (utils.isTrue(config)) return getDefaultPath();
        if (utils.isString(config)) return config;
        return null;

        function getDefaultPath() {
            return './ds.config.json';
        }
    }

    function runConfig(config) {
        if (!utils.isObject(config)) return exit('ds.config.json信息异常！')
        const fileList = [];
        const {useFile,filterDir} = curryUseFile(config, fileList)
        eachFolder(getRootPath(), useFile, filterDir);
        const jsonData = curryCreateJsonData(config.docServer)(fileList)
        createDocJsonAtPath(config.docServer.path,jsonData);

        function curryUseFile(config, fileList) {
            const [excludeFiles, excludeDirs] = getFilterWords(config.exclude);
            const [includeFiles, includeDirs] = getFilterWords(config.include);
            const extension = getExtension(config.extension)

            return {
                useFile(fullPath, foldedPath, fileName) {
                    if (includeFiles.every(word => !fullPath.includes(word))) return null;
                    if (excludeFiles.some(word => fullPath.includes(word))) return null;
                    let extensionLength = 0;
                    if (extension.some(x => {
                        const result = fileName.endsWith(x);
                        if(result) extensionLength = x.length;
                        return result;
                    })) fileList.push({
                        name:fileName.substring(0,fileName.length - extensionLength),
                        path:fullPath
                    })
                },
                filterDir: utils.isAllEmpty(excludeDirs,includeDirs) ? null : filterDir
            }

            function getExtension(extension) {
                if (utils.isUndefined(extension)) return ['.md'];
                if (Array.isArray(extension)) return extension;
                if (utils.isString(extension)) return [extension];
                // throw new Error("extension参数异常！")
                return [];
            }

            function getFilterWords(keys) {
                const files = [];
                const dirs = [];
                if (!Array.isArray(keys)) return [files, dirs];
                keys.forEach(k => {
                    files.push(k);
                    if (k.endsWith('/')) return dirs.push(k.slice(0, -1));
                });
                return [files, dirs];
            }

            function filterDir(dirName){
                if(includeDirs.some(word => dirName === word)) {
                    return !excludeDirs.some(word => dirName === word);
                }
            }
        }

        function curryCreateJsonData(docServer){
            const serverPath = docServer.path;
            const serverAbsPath = getAbsPath(getRootPath(),serverPath);
            const docsPath = docServer.context;
            const docsAbsPath = getAbsPath(getRootPath(),docsPath);

            return (fileList) => {
                return {
                    docsContext:getRelativePath(serverAbsPath,docsAbsPath),
                    docs:fileList.map(x=>{
                        return {
                            name:x.name,
                            path:getRelativePath(docsAbsPath,x.path)
                        }
                    })
                }
            }
        }

        function createDocJsonAtPath(serverPath,data){
            const jsonFolderPath = getAbsPath(getRootPath(),serverPath);
            const jsonFilePath = getAbsPath(jsonFolderPath,'doc.json');
            fs.writeFileSync(jsonFilePath,JSON.stringify(data));
        }
    }
}


//基础方法
function createPrint() {
    return {
        info(...text) {
            console.log(...text)
        },
        primary(coreInfo) {
            console.log(colors.blue(coreInfo));
        },
        error(coreInfo) {
            console.log(colors.red(coreInfo))
        },
        success(coreInfo) {
            console.log(colors.green(coreInfo))
        }
    }
}

function exit(info) {
    print.error(info);
    process.exit();
}

function readJson(path) {
    return require(path);
}

function readFile(path) {
    return fs.readFileSync(path, 'utf-8');
}

function getAbsPath(currentPath, relativePath) {
    return getWinPath(path.join(currentPath, relativePath));
}

function getRelativePath(basePath,otherPath){
    const p = getWinPath(path.relative(basePath,otherPath))
    return p.startsWith('.') ? p : './'.concat(p);
}

function getRootPath() {
    return getWinPath(process.cwd())
}

function getWinPath(result) {
    return result.replace(/\\/g, '/');
}

function eachFolder(dirName, callback, filter) {
    const dir = fs.readdirSync(dirName);
    dir.forEach(name => {
        const currentPath = getAbsPath(dirName, name);
        if (isDirectory(currentPath)) {
            if (!filter) return eachFolder(currentPath, callback, filter);
            return filter(name) ? eachFolder(currentPath, callback, filter) : null;
        }
        if (utils.isFunction(callback)) return callback(currentPath, dirName, name);
    })
}

function isDirectory(dirPath) {
    return fs.statSync(dirPath).isDirectory();
}
