#!/usr/bin/env node

'use strict';

const argv = require('minimist')(process.argv.slice(2));
const colors = require('colors/safe');
const path = require('path');
const fs = require('fs');
const {utils} = require('./utils.js');

process.title = 'create-doc-server';

const print = createPrint();

if (argv.h || argv.help) return printHelpInfo();
if (argv.v || argv.version) return printVersion();
if (argv.c || argv.config) return useConfig();
print.info("It is not a command provided by create-doc-server, you can execute cds -h to view the currently supported commands!");
process.exit();

function printHelpInfo() {
    print.info(getHelpInfo());
    process.exit();

    function getHelpInfo() {
        return [
            'usage: create-doc-server [path] [options]',
            '',
            'options',
            '-h --help              Print this list and exit',
            '-v --version           Print the current version and exit',
            '-c --config            Configuration file path'
        ].join('\n');
    }
}

function printVersion() {
    exit('v' + require('../package.json').version);
}

function useConfig() {
    const configPath = getRootAbsPath(getConfigPath());
    const config = readJson(configPath);
    createProject(config);

    function createProject(config){
        const projectPath = getRootAbsPath(config.projectName)
        makeDir(projectPath);
        const templatePath = getAbsPath(__dirname,'../template');
        copy(templatePath,projectPath);
    }

    function getConfigPath() {
        const config = argv.c || argv.config;
        if (utils.isTrue(config)) return getDefaultPath();
        if (utils.isString(config)) return config;
        return null;

        function getDefaultPath() {
            return './cds.config.json';
        }
    }
}


//基础方法
function createPrint() {
    return {
        info(...text) {
            console.log(...text)
        },
        primary(coreInfo) {
            console.log(colors.blue(coreInfo));
        },
        error(coreInfo) {
            console.log(colors.red(coreInfo))
        },
        success(coreInfo) {
            console.log(colors.green(coreInfo))
        }
    }
}

function exit(info) {
    print.error(info);
    process.exit();
}

//文件相关方法
function readJson(path) {
    return require(path);
}

function readFile(path) {
    return fs.readFileSync(path, 'utf-8');
}

function getAbsPath(currentPath, relativePath) {
    return getWinPath(path.join(currentPath, relativePath));
}

function getRootAbsPath(p){
    return getAbsPath(getRootPath(),p);
}

function getRelativePath(basePath,otherPath){
    const p = getWinPath(path.relative(basePath,otherPath))
    return p.startsWith('.') ? p : './'.concat(p);
}

function getRootPath() {
    //等同于process.cwd() 等同于path.resolve('./);
    return getWinPath(process.cwd())
}

function getWinPath(result) {
    return result.replace(/\\/g, '/');
}

function eachFolder(dirName, callback, filter) {
    const dir = fs.readdirSync(dirName);
    dir.forEach(name => {
        const currentPath = getAbsPath(dirName, name);
        if (isDirectory(currentPath)) {
            if (!filter) return eachFolder(currentPath, callback, filter);
            return filter(currentPath,dirName,name) ? eachFolder(currentPath, callback, filter) : null;
        }
        if (utils.isFunction(callback)) return callback(currentPath, dirName, name);
    })
}

function isDirectory(dirPath) {
    if(!fs.existsSync(dirPath)) return false;
    return fs.statSync(dirPath).isDirectory();
}

//创建目录-会删除旧目录【仅空目录】
function makeDir(dirName){
    if(isDirectory(dirName)) fs.rmdirSync(dirName);
    return fs.mkdirSync(dirName);
}

function copy(sourcePath,targetPath){
    // console.log(source,target);
    eachFolder(sourcePath,copyFile,copyFolder)

    function copyFile(currentPath){
        const relativePath = getRelativePath(sourcePath,currentPath);
        const targetFolderPath = getAbsPath(targetPath,relativePath);
        const file = readFile(currentPath);
        fs.writeFileSync(targetFolderPath,file);
    }

    function copyFolder(currentPath){
        const relativePath = getRelativePath(sourcePath,currentPath);
        const targetFolderPath = getAbsPath(targetPath,relativePath);
        makeDir(targetFolderPath);
        return true;
    }
}
