#!/usr/bin/env node

'use strict';

const argv = require('minimist')(process.argv.slice(2));
const colors  = require('colors/safe');
// const path = require('path');
const fs = require('fs')

const sep = '-';
const print = createPrint();

tryExecute(main);

function main(){
    process.title ='file-simple-control'
    if(argv.h || argv.help) printHelpInfo();
    if(argv.v || argv.version) printVersion();
    if(argv.p || argv.prifix) setPrefix();
    if(argv.s || argv.suffix) setSuffix();
}

function createPrint(){
    return {
        info(text){
            console.log(text)
        },
        error(text){
            console.log(colors.red(text))
        }
    }
}

function printHelpInfo(){
    print.info(getHelpInfo());
    process.exit();

    function getHelpInfo(){
        return [
            'usage: dynamic-pack [path] [options]',
            '',
            'options',
            '-h --help          打印这个列表并退出',
            '-v --version       打印当前版本并退出',
            '-p --prefix        设置文件前缀',
            '-s --suffix        批量修改文件后缀，参数base,start,end'
        ].join('\n');
    }
}

function printVersion(){
    print.info('v' + require('../package.json').version);
    process.exit();
}

async function tryExecute(callback){
    try {
        return await callback();
    } catch (err) {
        print.error(err.message)
    }
}

function setPrefix(){
    const newPrefix = argv.p || argv.prefix;
    const rootPath = getRootPath();
    const files = fs.readdirSync(rootPath);
    files.map(filename=>{
        checkSep(filename);
        const [prefix,name] = filename.split(sep);
        if(!prefix) throw new Error("文件名缺少前缀！");
        const newFileName = ''.concat(addZero(newPrefix),'-',name);
        fs.renameSync(filename,newFileName);
    });

    function addZero(n){
        return n<10 ? '0'.concat(n) : n;
    }
}

function setSuffix(){
    const [base,start,end] = getSuffixParams();

    const rootPath = getRootPath();
    const files = fs.readdirSync(rootPath);
    const newFileNames = files.map(filename=>{
        checkSep(filename);
        const [prefix,name] = filename.split(sep);
        const [value,suffix] = name.split('.');
        return `${prefix}-${getNewValue(value)}.${suffix}`;
    });
    newFileNames.forEach((x,i)=>fs.renameSync(files[i],x))

    function getNewValue(v){
        if(v < start || v > end) return v;
        const newValue = Number(v) + Number(base);
        if(newValue <= 0) throw new Error('转换出错：文件主体名必须大于0');
        if(isNaN(newValue)) throw new Error('转换出错：文件主体名必须是数字')
        return addZero(newValue);

        function addZero(n){
            return n<100 ? '0'.concat(n) : n;
        }
    }

    function getSuffixParams(){
        const suffixParamsString = argv.s || argv.suffix;
        if(typeof suffixParamsString !== "string") throw new Error('-s --suffix 参数必须是字符串！');
        const suffixParams = suffixParamsString.split(',');
        if(suffixParams.length < 2) throw new Error('-s --suffix 参数传递不全');
        return suffixParams;
    }
}

function getRootPath(){
    return getWinPath(process.cwd());
}

function getWinPath(result){
    return result.replace(/\\/g, '/');
}

function checkSep(filename){
    if(!filename.includes(sep)) throw new Error("文件名缺少指定分隔符！");
}
